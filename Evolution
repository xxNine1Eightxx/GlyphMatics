[2025-10-15 04:16:37] ✅ Loaded codex: glyphnotes_codex_full_with_glyphmatics.json (37 glyphs)
[2025-10-15 04:18:27] ✅ Loaded codex: glyphnotes_codex_full_with_glyphmatics.json (37 glyphs)
[2025-10-15 04:20:36] ✅ Loaded codex: glyphnotes_codex_full_with_glyphmatics.json (37 glyphs)
[2025-10-15 04:22:47] ✅ Loaded codex: glyphnotes_codex_full_with_glyphmatics.json (37 glyphs)
[2025-10-15 04:22:47] ⚙️ Starting evolution cycle...
[2025-10-15 04:44:13] ✅ Loaded codex: glyphnotes_codex_full_with_glyphmatics.json (37 glyphs)
[2025-10-15 04:44:13] ⚙️ Starting evolution cycle...
[2025-10-15 04:47:46] ❌ Codex not found.
[2025-10-15 04:49:27] ✅ Loaded codex: glyphnotes_codex_full_with_glyphmatics.json (4 glyphs)
[2025-10-15 04:49:27] ⚙️ Starting evolution cycle...
[2025-10-15 04:49:27] 🧠 Created glyph combo ['glyphmatics', 'glyphs', 'meta'] → 4db92f13816f
[2025-10-15 04:49:27] 🧠 Created glyph combo ['meta', 'glyphs', 'validation'] → 92d7c00f2732
[2025-10-15 04:49:27] 📦 Saved generation with 2 glyphs.
[2025-10-15 04:49:27] ⏱ Next evolution in 178s

[2025-10-15 04:51:48] ✅ Loaded codex: glyphnotes_codex_full_with_glyphmatics.json (1 glyphs)
[2025-10-15 04:51:48] ⚙️ Starting evolution cycle...
[2025-10-15 04:51:48] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:51:48] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:51:48] 📦 Saved generation with 2 glyphs.
[2025-10-15 04:51:48] ⏱ Next evolution in 173s

[2025-10-15 04:54:41] ⚙️ Starting evolution cycle...
[2025-10-15 04:54:41] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:54:41] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:54:41] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:54:41] 📦 Saved generation with 3 glyphs.
[2025-10-15 04:54:41] ⏱ Next evolution in 85s

[2025-10-15 04:56:06] ⚙️ Starting evolution cycle...
[2025-10-15 04:56:06] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:56:06] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:56:06] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:56:06] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:56:06] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:56:06] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:56:06] 📦 Saved generation with 6 glyphs.
[2025-10-15 04:56:06] ⏱ Next evolution in 63s

[2025-10-15 04:57:09] ⚙️ Starting evolution cycle...
[2025-10-15 04:57:09] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:57:09] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:57:09] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:57:09] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:57:09] 📦 Saved generation with 4 glyphs.
[2025-10-15 04:57:09] ⏱ Next evolution in 155s

[2025-10-15 04:59:44] ⚙️ Starting evolution cycle...
[2025-10-15 04:59:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:59:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:59:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:59:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:59:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:59:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 04:59:44] 📦 Saved generation with 6 glyphs.
[2025-10-15 04:59:44] ⏱ Next evolution in 60s

[2025-10-15 05:00:44] ⚙️ Starting evolution cycle...
[2025-10-15 05:00:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 05:00:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 05:00:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 05:00:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 05:00:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 05:00:44] 🧠 Created glyph combo ['codex'] → d688ae4face9
[2025-10-15 05:00:44] 📦 Saved generation with 6 glyphs.
[2025-10-15 05:00:44] ⏱ Next evolution in 155s

[2025-10-15 05:01:01] ⚙️ Starting evolution cycle...
[2025-10-15 05:01:01] 🧠 Created glyph combo ['glyph_28ef99278278', 'glyph_a387a98ea7ae', 'glyph_7c374828f95e'] → b24a25360b17
[2025-10-15 05:01:01] 🧠 Created glyph combo ['glyph_fc4fcdeb310c', 'elif attempt2 is None', 'glyph_4c5d211c719d'] → 75a11da44c80
[2025-10-15 05:01:01] 🧠 Created glyph combo ['# Normalize to dict id -> {"train"', 'glyph_32ff00febd28', '# Unknown tag'] → f93439fe804e
[
  {
    "id": "b24a25360b17",
    "combo": [
      "glyph_28ef99278278",
      "glyph_a387a98ea7ae",
      "glyph_7c374828f95e"
    ],
    "code": "# Kaggle expects JSON-like string of nested lists\nattempt2 = p\nreturn 1.0"
  },
  {
    "id": "75a11da44c80",
    "combo": [
      "glyph_fc4fcdeb310c",
      "elif attempt2 is None",
      "glyph_4c5d211c719d"
    ],
    "code": "\n\n"
  },
  {
    "id": "f93439fe804e",
    "combo": [
      "# Normalize to dict id -> {\"train\"",
      "glyph_32ff00febd28",
      "# Unknown tag"
    ],
    "code": "[{\"input\":..,\"output\":..},...], \"test\":[{\"input\":..},...]}\nEND OF NOTEBOOK\nprefer attempt1"
  }
]
[2025-10-15 05:01:01] 🔗 Ledger updated with 3 glyphs → 624ac7677d3a0a8c
[2025-10-15 05:01:01] 📦 Saved generation with 3 glyphs.
[2025-10-15 05:01:01] ⏱ Next evolution in 69s

[2025-10-15 05:02:10] ⚙️ Starting evolution cycle...
[2025-10-15 05:02:10] 🧠 Created glyph combo ['if f["PALETTE_SIZE"] <= 4', 'glyph_3c0b4195d88c', 'glyph_6955a928c304'] → 4190ccd54f3d
[2025-10-15 05:02:10] 🧠 Created glyph combo ['glyph_ef0c94473bbd', 'glyph_c598db4ee363', 'glyph_5f4ed5cff184'] → 3deb74810a13
[2025-10-15 05:02:10] 🧠 Created glyph combo ['glyph_5b1da77d8ca5', 'raise ValueError(f"Unknown DSL op', 'def unpack_glyphnotes(png_path'] → 7b8f810da81a
[
  {
    "id": "4190ccd54f3d",
    "combo": [
      "if f[\"PALETTE_SIZE\"] <= 4",
      "glyph_3c0b4195d88c",
      "glyph_6955a928c304"
    ],
    "code": "\n\nout = grid.copy()"
  },
  {
    "id": "3deb74810a13",
    "combo": [
      "glyph_ef0c94473bbd",
      "glyph_c598db4ee363",
      "glyph_5f4ed5cff184"
    ],
    "code": "return sub_path\nreturn float(PRI[\"buckets\"].get(fprint_bucket, {}).get(fam_key, 1.0))\n# Parse output_id to extract task id and test index if present"
  },
  {
    "id": "7b8f810da81a",
    "combo": [
      "glyph_5b1da77d8ca5",
      "raise ValueError(f\"Unknown DSL op",
      "def unpack_glyphnotes(png_path"
    ],
    "code": "\n{t}\")\nstr) -> Dict[str, Any]:"
  }
]
[2025-10-15 05:02:10] 🔗 Ledger updated with 3 glyphs → 5ecb2ef90fe86ec7
[2025-10-15 05:02:10] 📦 Saved generation with 3 glyphs.
[2025-10-15 05:02:10] ⏱ Next evolution in 177s

[2025-10-15 05:02:47] ⚙️ Starting evolution cycle...
[2025-10-15 05:02:47] 🧠 Created glyph combo ['glyph_33d01e7a1263', 'glyph_0e004e0ae578', 'glyph_49ff2cc1445f'] → 643507e1fd0c
[2025-10-15 05:02:47] 🧠 Created glyph combo ['if not eval_json or not sample_csv', 'glyph_6daaddb72648', 'glyph_eea0bf9a3176'] → dc0b6de63e5e
[2025-10-15 05:02:47] 🧠 Created glyph combo ['glyph_12f640955422', 'glyph_685aeb904cc8', 'def bbox_of_label(lab, lid)'] → 0212ada60a97
[2025-10-15 05:02:47] 🧠 Created glyph combo ['glyph_303bcf99d21e', 'glyph_ffbab218605d', 'glyph_2c894b956c52'] → f91818dcc691
[
  {
    "id": "643507e1fd0c",
    "combo": [
      "glyph_33d01e7a1263",
      "glyph_0e004e0ae578",
      "glyph_49ff2cc1445f"
    ],
    "code": "# Cell 4 \u2014 Features, Proposals, Observers, and Judges\ntest_grid = to_np_grid(task[\"test\"][test_idx][\"input\"])\n"
  },
  {
    "id": "dc0b6de63e5e",
    "combo": [
      "if not eval_json or not sample_csv",
      "glyph_6daaddb72648",
      "glyph_eea0bf9a3176"
    ],
    "code": "\nP += [\"TILE(2,1)\", \"TILE(1,2)\", \"TILE(2,2)\"]\n# Cell 5 \u2014 Dataset Discovery, Loader, Serialization"
  },
  {
    "id": "0212ada60a97",
    "combo": [
      "glyph_12f640955422",
      "glyph_685aeb904cc8",
      "def bbox_of_label(lab, lid)"
    ],
    "code": "\n# ARC\u2011AGI\u20112 \u2014 GlyphNotes FIGILAGI Solver (Offline, Deterministic)\n"
  },
  {
    "id": "f91818dcc691",
    "combo": [
      "glyph_303bcf99d21e",
      "glyph_ffbab218605d",
      "glyph_2c894b956c52"
    ],
    "code": "\nEVAL_OVERRIDE  = os.environ.get(\"ARC_EVAL_PATH\", \"\").strip()\n"
  }
]
[2025-10-15 05:02:47] 🔗 Ledger appended (generation) → b8cd852f7bf92514
[2025-10-15 05:02:47] 📦 Saved generation with 4 glyphs.
[2025-10-15 05:02:47] ⏱ Next evolution in 163s

[2025-10-15 05:05:30] ⚙️ Starting evolution cycle...
[2025-10-15 05:05:30] 🧠 Created glyph combo ['if family_signature(p) != fam1', 'glyph_b471bf460a39', 'glyph_6612f5d963f5'] → b6477272312b
[2025-10-15 05:05:30] 🧠 Created glyph combo ['def to_np_grid(grid_list', 'glyph_eb897c7dbc82', 'glyph_391f461c1172'] → b3d056567d67
[2025-10-15 05:05:30] 🧠 Created glyph combo ['for t in tokens', 'elif t.startswith("TILE")', 'glyph_db262e525448'] → ea33a23e7ed6
[
  {
    "id": "b6477272312b",
    "combo": [
      "if family_signature(p) != fam1",
      "glyph_b471bf460a39",
      "glyph_6612f5d963f5"
    ],
    "code": "\n# ===============================================\n# ==================================="
  },
  {
    "id": "b3d056567d67",
    "combo": [
      "def to_np_grid(grid_list",
      "glyph_eb897c7dbc82",
      "glyph_391f461c1172"
    ],
    "code": "List[List[int]]) -> np.ndarray:\nsocket.socket = _NoNet\ntgt = pair[\"output\"]"
  },
  {
    "id": "ea33a23e7ed6",
    "combo": [
      "for t in tokens",
      "elif t.startswith(\"TILE\")",
      "glyph_db262e525448"
    ],
    "code": "\n\ncy, cx = q.pop()"
  }
]
[2025-10-15 05:05:30] 🔗 Ledger appended (generation) → 8c57b7d47f4f0619
[2025-10-15 05:05:30] 📦 Saved generation with 3 glyphs.
[2025-10-15 05:05:30] ⏱ Next evolution in 118s

[2025-10-15 05:07:28] ⚙️ Starting evolution cycle...
[2025-10-15 05:07:28] 🧠 Created glyph combo ['glyph_6ce3d9ec3b32', 'glyph_2e36c9d0752a', 'glyph_df953565fa83'] → 1d43e115e5c7
[2025-10-15 05:07:28] 🧠 Created glyph combo ['glyph_e392386fecc9', 'glyph_fa2b0230efb6', 'glyph_133f8017303f'] → 9743a2389ab7
[2025-10-15 05:07:28] 🧠 Created glyph combo ['glyph_ad2a397e3d27', '"attempt1"', 'glyph_a94424583c6b'] → c7d20058d164
[2025-10-15 05:07:28] 🧠 Created glyph combo ['glyph_25ba47275c84', '# Attempt tag', 'glyph_9553448274b8'] → e985a9978eb6
[2025-10-15 05:07:28] 🧠 Created glyph combo ['glyph_9f57b8e498a8', '"attempt1"', 'glyph_ad11d2d17ef5'] → ed7758068c2a
[
  {
    "id": "1d43e115e5c7",
    "combo": [
      "glyph_6ce3d9ec3b32",
      "glyph_2e36c9d0752a",
      "glyph_df953565fa83"
    ],
    "code": "\n# ======================================\nscored = [(p, score_candidate(train_pairs, p, prior_maps)) for p in cand]"
  },
  {
    "id": "9743a2389ab7",
    "combo": [
      "glyph_e392386fecc9",
      "glyph_fa2b0230efb6",
      "glyph_133f8017303f"
    ],
    "code": "q.append((ny, nx))\nFOUNDERS GLYPHLOCK PASSPHRASE (KEEP SECRET)\n# safe generic combos"
  },
  {
    "id": "c7d20058d164",
    "combo": [
      "glyph_ad2a397e3d27",
      "\"attempt1\"",
      "glyph_a94424583c6b"
    ],
    "code": "PERIOD_X=int(px), PERIOD_Y=int(py), OBJ_COUNT=int(comp))\na1, \"attempt2\": a2,\nbuckets[b][fam_key] += 1"
  },
  {
    "id": "e985a9978eb6",
    "combo": [
      "glyph_25ba47275c84",
      "# Attempt tag",
      "glyph_9553448274b8"
    ],
    "code": "start = time.time()\n\"a\"/\"b\" or \"1\"/\"2\" or None\ntag = s[-1]"
  },
  {
    "id": "ed7758068c2a",
    "combo": [
      "glyph_9f57b8e498a8",
      "\"attempt1\"",
      "glyph_ad11d2d17ef5"
    ],
    "code": "# Network kill-switch (compliance)\na1, \"attempt2\": a2,\nCELL 7 [CODE]"
  }
]
[2025-10-15 05:07:28] 🔗 Ledger appended (generation) → 3cda3e8509cfe1f7
[2025-10-15 05:07:28] 📦 Saved generation with 5 glyphs.
[2025-10-15 05:07:28] ⏱ Next evolution in 112s

[2025-10-15 05:09:20] ⚙️ Starting evolution cycle...
[2025-10-15 05:09:20] 🧠 Created glyph combo ['glyph_f9ce31b5ed66', 'glyph_3a2058925f9d', 'if not train_pairs'] → d8b5c4655062
[2025-10-15 05:09:20] 🧠 Created glyph combo ['glyph_da38a21ffd99', 'def family_signature(prog', 'glyph_0b4d3e261ad7'] → e00c92cf8045
[2025-10-15 05:09:20] 🧠 Created glyph combo ['glyph_5e8fa8ec222c', 'elif t.startswith("TRANSLATE")', 'raise ValueError(f"Unknown DSL op'] → 44421420cc1b
[2025-10-15 05:09:20] 🧠 Created glyph combo ['glyph_9033d1243ead', 'glyph_223651317a40', 'def rot90(grid, k=1)'] → 75a11da44c80
[2025-10-15 05:09:20] 🧠 Created glyph combo ['elif t.startswith("SCALE")', 'glyph_7beefcdf8456', 'glyph_d088272f811e'] → a57c7d0f1dea
[
  {
    "id": "d8b5c4655062",
    "combo": [
      "glyph_f9ce31b5ed66",
      "glyph_3a2058925f9d",
      "if not train_pairs"
    ],
    "code": "\u03c6\u03c6\u03c6\u03bc\u03c6\u03b3\u03b5\u2600\u03c6\u03b5\u03b5\u269b\u03b5\u27c2\u03c6\u03c6\u03c6\u03b1\u03b5\u2601\u03b5\u269b\u03c6\u03b3\u03b5\u2265\u03b5\u2264\u03b5\u263e\u03b5\u2693\u03c6\u03bc\u03c6\u03c6\u03b5\u2600\u03b5\ud83e\uddee\u03c6\u03b5\u03c6\u03b3\u03b5\u2606\u03c6\u03b2\u03b5\u2264\u03b5\u26a0\n\u03b5\u2602\u03b5\u00b6\u03c6\u03b8\u03b5\u00b6\u03c6\u03b2\u03b5\u2021\u03c6\u03b1\u03b5\u2601\u03c6\u03c6\u03c6\u03b3\u03b5\u27c2\u03b5\u2021\u03c6\u03b5\u03b5\u269b\u03c6\u03b2\u03c6\u03b5\u03b5\u2693\u03b5\u2606\u03b5\ud83d\udcd6\u03b5\u2693\u03c6\u03b5\u03b5\u263e\u03b5\u2265\u03b5\u2264\u03b5\u25a1\u03b5\u2606\u03b5\u2693\u03b5\u2693\u03c6\u03b5\u03b5\u2227\u03b5\u263c\u03c6\u03b1\u03c6\u03b5\u03b5\u2697\u03b5\u2227\u03b5\u2660\u03b5\ud83d\udd0e\u03b5\u2227\u03b5\u263e\u03b5\u2693\u03c6\u03bc\u03c6\u03c6\u03b5\u2600\u03b5\u2264\u03b5\u26a0\n"
  },
  {
    "id": "e00c92cf8045",
    "combo": [
      "glyph_da38a21ffd99",
      "def family_signature(prog",
      "glyph_0b4d3e261ad7"
    ],
    "code": "# Palette\nstr) -> Tuple[bool, bool, bool]:\norder = vals[np.argsort(-counts)]"
  },
  {
    "id": "44421420cc1b",
    "combo": [
      "glyph_5e8fa8ec222c",
      "elif t.startswith(\"TRANSLATE\")",
      "raise ValueError(f\"Unknown DSL op"
    ],
    "code": "\n\n{t}\")"
  },
  {
    "id": "75a11da44c80",
    "combo": [
      "glyph_9033d1243ead",
      "glyph_223651317a40",
      "def rot90(grid, k=1)"
    ],
    "code": "\n\n"
  },
  {
    "id": "a57c7d0f1dea",
    "combo": [
      "elif t.startswith(\"SCALE\")",
      "glyph_7beefcdf8456",
      "glyph_d088272f811e"
    ],
    "code": "\n# Build a map for quick lookup\n# Try to find priors in /kaggle/input"
  }
]
[2025-10-15 05:09:20] 🔗 Ledger appended (generation) → db4e09722997993c
[2025-10-15 05:09:20] 📦 Saved generation with 5 glyphs.
[2025-10-15 05:09:20] ⏱ Next evolution in 96s

[2025-10-15 05:10:14] ✅ Loaded codex: glyphnotes_codex_full_with_glyphmatics.json (556 glyphs)
[2025-10-15 05:10:14] ❌ Combo FAIL ['glyph_6b534561992d', 'glyph_ee1a9a5ed946', 'glyph_699397e5e606'] → ['Traceback (most recent call last):']
[2025-10-15 05:10:14] ❌ Combo FAIL ['glyph_bbc9971387bb', 'glyph_b92fc47acab3', '# Unknown tag'] → ['  File "<string>", line 3']
[2025-10-15 05:10:14] ✅ Combo OK ['glyph_13c080a8b3b0', 'glyph_3a2058925f9d'] → 1cfe9be05a60
[2025-10-15 05:10:14] ✅ Combo OK ['glyph_0b3d7ce5280d', 'glyph_00f307030d03', 'glyph_f9ce31b5ed66'] → 989422a423e1
[2025-10-15 05:10:14] ❌ Combo FAIL ['glyph_67121bdcb60c', 'glyph_2363044a3e48'] → ['Traceback (most recent call last):']
[2025-10-15 05:10:14] ❌ Combo FAIL ['glyph_699397e5e606', 'def solve_and_submit(train_json', 'Salt(b64u)'] → ['  File "<string>", line 2']
[2025-10-15 05:10:14] ✅ Combo OK ['glyph_e87bd4fe1fc6', 'glyph_24be9906609c'] → 20a051e7e1e5
[2025-10-15 05:10:14] ❌ Combo FAIL ['glyph_e35965e75eb0', 'glyph_e8362b014c02', 'glyph_ab0863bd2367'] → ['Traceback (most recent call last):']
[2025-10-15 05:10:14] ✅ Combo OK ['glyph_00f307030d03', 'glyph_362f0b7f1c09'] → daad6c1a68f7
{"combos": [{"id": "combo_1cfe9be05a60", "hash": "1cfe9be05a60edd02d8d47d89ec14cb90c4a806a19ebee8ccb2ec4844e0dfdaf", "ids": ["glyph_13c080a8b3b0", "glyph_3a2058925f9d"], "lang": "unknown", "code": "ε☂ε¶φθε¶φβε‡φαε☁φφφγε⟂ε☼φεφαε≥ε⚓ε☆φγε∧ε☁ε⧈ε∞ε⨉ε☁ε⧉ε⊕ε⨉ε☁ε📂ε📂ε⚠ε∧ε‡φεε⚛φβφεε⚓ε☆ε📖ε⚓φεε☾ε≥ε≤ε☾ε⚓φμφφε☀ε∧ε≤ε📂ε☁ε⚠ε⨉εμε@ε⮕ε📈ε🔎ε⟂\nε☂ε¶φθε¶φβε‡φαε☁φφφγε⟂ε‡φεε⚛φβφεε⚓ε☆ε📖ε⚓φεε☾ε≥ε≤ε□ε☆ε⚓ε⚓φεε∧ε☼φαφεε⚗ε∧ε♠ε🔎ε∧ε☾ε⚓φμφφε☀ε≤ε⚠", "valid": true}, {"id": "combo_989422a423e1", "hash": "989422a423e1f837217cf3192b1c88788b80443c0b62ba81507054a4f75bb607", "ids": ["glyph_0b3d7ce5280d", "glyph_00f307030d03", "glyph_f9ce31b5ed66"], "lang": "unknown", "code": "φφφμφγε☀φεε⚛ε⟂φβφδε⚗ε≥ε🏋ε⇌ε📄ε⇔ε📄ε⊕ε🔁ε⚠\nε⧉ε∨ε★φεε‡φγφμφφε☆ε∧ε☀φγε⚗ε⚓ε⧊εμε⧉ε☀φγε⚗ε⚓ε∧ε⚓ε¶ε⚛ε☾ε⧈ε¬ε☆ε⚛ε¬ε⧊εμε⧉ε☀ε☆ε¶ε★ε⧊εμε⧉ε⚗ε☆φγε¶ε∧ε‡ε☀ε¶φαφβε☆φγε⧈ε¬φδφγε☼ε📝ε∘ε¬ε⧊εμε⧉ε⚗ε☆φγε¶ε∧ε⚛ε¶ε⚗ε☆ε⧈ε¬φθε☁ε☆φλφφφεφαφγε¬ε∧ε‡φεε⚛φγε☆ε⚛φγε⧈ε¬φλε☁ε★φγε☀ε⧈ε★ε☆φθε☁ε‡ε☆ε📝φλε☁ε★φγε☀ε📄ε∧ε☁ε⚛ε☁φγε☁ε¶ε⚓ε📝φβε‡ε¶ε⚓ε☆ε⧈ε⇌ε¬ε∧ε🗑ε⧊εμε⧉φγε☁φγε⚓ε☆ε⧊ε📊ε⚗ε⚛ε☁ε∧ε⏩ε☾ε☆ε⚛φγε∧ε♣ε¶ε☆φβφγφαφεε∧ψβφΩφ<ε∧ε♦ε☁φθε☁ε⚛ε☾ε∧ε⚙φεφεε☃ε∧ε≥ε⮕φκε☆ε‡φδφγε¶ε†ε⚓ε☆ε∧ε⤴ε⚓φμφφε☀φβε⚠ε⧉ε🗑φγε☁φγε⚓ε☆ε⧊εμε⧉φβφγφμε⚓ε☆ε⧊εμε⟂φαφεφεφγφρεμε∧ε∧ε📝ε📝ε†ε☾ε⟂ε=ε∞ε†ε⇌ε∞ε⇔ε∞ε⨉ε∧ε📝ε📝φφε¶ε⚛ε☆ε⚓ε⟂ε=ε∞ε☼ε⇌ε∇ε⊕ε∞ε⨉ε∧ε📝ε📝ε☁ε⚛ε☃ε⟂ε=ε☆ε⋅ε☼ε⇌ε☼ε☼ε⨉εμε∧ε∧ε📝ε📝ε¶ε‡ε‡ε☆ε⚛φγε⟂ε=ε∉ε¶ε☆ε⊕ε☼ε☼ε⨉ε∧ε📝ε📝ε¶ε‡ε‡ε☆ε⚛φγε⇔ε⟂ε=ε⇔ε‡ε‡ε⇔ε☼ε☼ε⨉ε∧ε📝ε📝ε☾φαε☆ε☆ε⚛ε⟂ε=ε⇌ε☼ε∉ε☼ε⇌ε☼ε⨉ε∧ε📝ε📝φφε¶ε★ε⟂ε=ε⇌ε⊕ε⊕ε¶ε⇌ε⊕ε⨉εμε∧ε∧ε📝ε📝ε†φαε☁ε‡ε☃ε⟂ε=ε⊕ε†ε∇ε★ε★ε★ε⨉ε∧ε📝ε📝ε†φαε☁ε‡ε☃ε⇔ε⟂ε=ε⇔ε☼ε∈ε☼ε†ε⊕ε⨉ε∧ε📝ε📝ε⚓ε☁ε⚛ε☆ε⟂ε=ε⇌ε†ε⇔ε¶ε∈ε⇔ε⨉ε∧ε📝ε📝φλε¶φαε⚛ε⟂ε=ε☼ε☼ε†ε∘ε∉ε†ε⨉εμε∧ε∧ε📝ε📝φεε☃ε⟂ε=ε∈ε¶ε☼ε∇ε∘ε☆ε⨉ε∧ε📝ε📝ε★ε¶ε⚛ε☾ε☆φαε⟂ε=ε☼ε☼ε∈ε☼ε∈ε∉ε⨉ε∧ε📝ε📝ε⚗φδφγε☆ε★ε⟂ε=ε⋅ε†ε†ε∞ε★ε∞ε⨉εμε∧ε∧ε📝ε📝φβε☁ε☾ε☁ε⚓ε⟂ε=ε∉ε⇔ε‡ε⋅ε☼ε☼ε⨉ε∧ε📝ε📝φβε☁ε☾ε☁ε⚓ε⤴ε⚓φεφλε⟂ε=ε∘ε¶ε☆ε∘ε☼ε☼ε⨉εμφτεμε✓φρε†φεφκε📝φβε☁φνε☁ε⚛ε☾ε⟂ε†φεφαε★ε☆φαε📝ε†φεφκφτεμε☀φγε⚗ε⚓ε📄ε†φεε★φμφρε⚗ε¶φαε☾ε☁ε⚛ε⟂ε∞ε⨉ε†ε¶ε‡ε☃ε☾φαφεφδε⚛ε★ε⟂φθε¶φαε≥ε📝ε📝ε†ε☾ε⚠ε⨉ε‡φεε⚓φεφαε⟂φθε¶φαε≥ε📝ε📝ε☁ε⚛ε☃ε⚠ε⨉ε☼φεε⚛φγε⟂ε⇌ε∉φφφκε🗑ε⇌ε📖ε⊗ε∈ε∧φβφμφβφγε☆ε⚗ε📝φδε☁ε📄ε🔎ε☆ε☾φεε☆ε∧ε🌍ε◇ε📄ε🔍φεε†φεφγφεε📄ε◇ε⚛φγε☆φαε📄ε⏩φαε☁ε¶ε⚓φτεμε☀ε☆ε¶ε★ε☆φαφρε★ε☁φβφφε⚓ε¶φμε⟂ε☼ε⚓ε☆φκε⨉ε☾ε¶φφε⟂ε📖ε∇ε∈φαε☆ε⚗ε⨉ε¶ε⚓ε☁ε☾ε⚛ε📝ε☁φγε☆ε⚗φβε⟂ε‡ε☆ε⚛φγε☆φαε⨉ε☂φδφβφγε☁ε☼φμε📝ε‡φεε⚛φγε☆ε⚛φγε⟂φβφφε¶ε‡ε☆ε📝ε†ε☆φγφλε☆ε☆ε⚛ε⨉φφε¶ε★ε★ε☁ε⚛ε☾ε⟂ε📖ε∘φαε☆ε⚗ε∧ε⇌φαε☆ε⚗ε⨉ε†ε¶ε‡ε☃ε☾φαφεφδε⚛ε★ε⟂ε⚓ε☁ε⚛ε☆ε¶φαε📝ε☾φαε¶ε★ε☁ε☆ε⚛φγε≥ε⇌ε∘ε∞ε★ε☆ε☾ε📄ε∧ε=ε∞ε☼ε⇌ε∘ε⊕ε∉ε📄ε∧ε=ε∞ε¶ε⇌ε⇔ε⊕ε∞ε⚠ε⨉ε†φεφαε★ε☆φαε📝ε†φεφγφγφεε⚗ε⟂ε⇌φφφκε∧φβφεε⚓ε☁ε★ε∧ε=ε⇌ε⊗ε⇔ε⇔ε⊗ε¶ε⨉φφφεφβε☁φγε☁φεε⚛ε⟂φβφγε☁ε‡ε☃φμε⨉φγφεφφε⟂ε∞ε⨉φνε📝ε☁ε⚛ε★ε☆φκε⟂ε∈φτεμε☀ε⇌φρε⚗ε¶φαε☾ε☁ε⚛ε⟂ε∞ε⨉ε☼φεε⚛φγε📝φβε☁φνε☆ε⟂ε⇌ε📖ε⇌φαε☆ε⚗ε⨉ε⚓ε☆φγφγε☆φαε📝φβφφε¶ε‡ε☁ε⚛ε☾ε⟂ε📖ε⊕φφφκφτεμφβε⚗ε¶ε⚓ε⚓ε📖ε†ε¶ε★ε☾ε☆φρε‡φεε⚓φεφαε⟂ε=ε⋅ε†ε★ε⊕ε☼ε☼ε⨉ε†ε¶ε‡ε☃ε☾φαφεφδε⚛ε★ε⟂ε=ε∞ε†ε⇔ε∇ε⊗ε⊗ε⨉ε†φεφαε★ε☆φαε⟂ε⇌φφφκε∧φβφεε⚓ε☁ε★ε∧ε=ε⇌ε∈ε⊕ε†ε∉ε⇔ε⨉φφε¶ε★ε★ε☁ε⚛ε☾ε⟂ε📖ε⇌ε∈φαε☆ε⚗ε∧ε📖ε⊗ε∈φαε☆ε⚗ε⨉ε†φεφαε★ε☆φαε📝φαε¶ε★ε☁φδφβε⟂ε⋅ε⋅ε⋅φφφκφτεμε⚗ε¶ε☁ε⚛φρε★ε☁φβφφε⚓ε¶φμε⟂ε☾φαε☁ε★ε⨉ε☾φαε☁ε★ε📝φγε☆ε⚗φφε⚓ε¶φγε☆ε📝ε‡φεε⚓φδε⚗ε⚛φβε⟂ε∧ε⊕ε⊗ε∞φφφκε∧ε⇌ε☼φαε⨉ε∧ε☾ε¶φφε⟂ε⇌ε⇔φφφκε⨉ε∧φφε¶ε★ε★ε☁ε⚛ε☾ε⟂ε⇌ε⇔φφφκφτεμφβε☆ε‡φγε☁φεε⚛ε📖φφε¶ε⚛ε☆ε⚓φρε†ε¶ε‡ε☃ε☾φαφεφδε⚛ε★ε⟂φθε¶φαε≥ε📝ε📝φφε¶ε⚛ε☆ε⚓ε⚠ε⨉ε†φεφαε★ε☆φαε⟂ε⇌φφφκε∧φβφεε⚓ε☁ε★ε∧ε=ε⇌ε∘ε⇔ε†ε∈ε∈ε⨉ε†φεφαε★ε☆φαε📝φαε¶ε★ε☁φδφβε⟂ε⇌ε⊗φφφκε⨉ε†φεφκε📝φβε☀ε¶ε★φεφλε⟂ε∞ε∧ε⇌ε∞φφφκε∧ε⊕ε∞φφφκε∧ε=ε∞ε∞ε∞ε⊗ε⨉ε⚗ε☁ε⚛ε📝ε☀ε☆ε☁ε☾ε☀φγε⟂ε⇌ε⇔ε∞φφφκφτεμφβε☆ε‡φγε☁φεε⚛ε📖φφε¶ε⚛ε☆ε⚓ε∧ε☀ε☆ε¶ε★ε☆φαφρφφφεφβε☁φγε☁φεε⚛ε⟂φδε⚛φβε☆φγε⨉ε†ε¶ε‡ε☃ε☾φαφεφδε⚛ε★ε⟂φγφαε¶ε⚛φβφφε¶φαε☆ε⚛φγε⨉ε†φεφαε★ε☆φαε⟂ε∞ε⨉φφε¶ε★ε★ε☁ε⚛ε☾ε⟂ε📖ε∇ε∈φαε☆ε⚗ε∧ε⇌φαε☆ε⚗φτεμε📖ε‡φεε⚛φγφαφεε⚓φβφρε★ε☁φβφφε⚓ε¶φμε⟂ε☼ε⚓ε☆φκε⨉ε☼ε⚓ε☆φκε📝φλφαε¶φφε⟂φλφαε¶φφε⨉ε☾ε¶φφε⟂ε📖ε∈φαε☆ε⚗ε⨉φφε¶ε★ε★ε☁ε⚛ε☾ε⟂ε∞ε∧ε⇌φαε☆ε⚗ε∧ε⇌φαε☆ε⚗φτεμε†φδφγφγφεε⚛ε📄ε∧ε📖ε†φγε⚛φρε¶φφφφε☆ε¶φαε¶ε⚛ε‡ε☆ε⟂ε⚛φεε⚛ε☆ε⨉ε†φεφαε★ε☆φαε⟂ε⇌φφφκε∧φβφεε⚓ε☁ε★ε∧ε=ε⇌ε¶ε⇔ε☼ε∉ε⊗ε⨉ε†ε¶ε‡ε☃ε☾φαφεφδε⚛ε★ε⟂ε=ε∞ε‡ε⇌ε∈ε⇔ε☼ε⨉ε‡φεε⚓φεφαε⟂φθε¶φαε≥ε📝ε📝ε☁ε⚛ε☃ε⚠ε⨉εμε∧ε∧φφε¶ε★ε★ε☁ε⚛ε☾ε⟂ε📖ε⊗ε∈φαε☆ε⚗ε∧ε📖ε∇ε∈φαε☆ε⚗ε⨉ε†φεφαε★ε☆φαε📝φαε¶ε★ε☁φδφβε⟂ε⇌ε∞φφφκε⨉ε‡φδφαφβφεφαε⟂φφφεε☁ε⚛φγε☆φαε⨉ε☼φεε⚛φγε📝φλε☆ε☁ε☾ε☀φγε⟂ε∉ε∞ε∞φτεμε†φδφγφγφεε⚛ε⟂ε☀φεφθε☆φαφρε†φεφαε★ε☆φαε📝ε‡φεε⚓φεφαε⟂ε=ε⇔ε†ε⊗ε★ε¶ε∞ε⨉ε†ε¶ε‡ε☃ε☾φαφεφδε⚛ε★ε⟂ε=ε∞ε☼ε⇌ε‡ε⊕ε¶φτεμε†φδφγφγφεε⚛ε📖φφφαε☁ε⚗ε¶φαφμφρε†ε¶ε‡ε☃ε☾φαφεφδε⚛ε★ε⟂ε⚓ε☁ε⚛ε☆ε¶φαε📝ε☾φαε¶ε★ε☁ε☆ε⚛φγε≥ε⇌ε∘ε∞ε★ε☆ε☾ε📄ε=ε⇌ε⇔ε⊕ε∈ε∘ε⊕ε📄ε=ε∞ε★ε⇔ε¶ε∉ε¶ε⚠ε⨉ε†φεφ�
